// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestAddressesMessage {
    #[prost(bool, tag = "1")]
    pub include_all_subnetworks: bool,
    #[prost(message, optional, tag = "2")]
    pub subnetwork_id: ::core::option::Option<SubnetworkId>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddressesMessage {
    #[prost(message, repeated, tag = "1")]
    pub address_list: ::prost::alloc::vec::Vec<NetAddress>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NetAddress {
    #[prost(int64, tag = "1")]
    pub timestamp: i64,
    #[prost(bytes = "vec", tag = "3")]
    pub ip: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "4")]
    pub port: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubnetworkId {
    #[prost(bytes = "vec", tag = "1")]
    pub bytes: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionMessage {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(message, repeated, tag = "2")]
    pub inputs: ::prost::alloc::vec::Vec<TransactionInput>,
    #[prost(message, repeated, tag = "3")]
    pub outputs: ::prost::alloc::vec::Vec<TransactionOutput>,
    #[prost(uint64, tag = "4")]
    pub lock_time: u64,
    #[prost(message, optional, tag = "5")]
    pub subnetwork_id: ::core::option::Option<SubnetworkId>,
    #[prost(uint64, tag = "6")]
    pub gas: u64,
    #[prost(bytes = "vec", tag = "8")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "9")]
    pub mass: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionInput {
    #[prost(message, optional, tag = "1")]
    pub previous_outpoint: ::core::option::Option<Outpoint>,
    #[prost(bytes = "vec", tag = "2")]
    pub signature_script: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "3")]
    pub sequence: u64,
    #[prost(uint32, tag = "4")]
    pub sig_op_count: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Outpoint {
    #[prost(message, optional, tag = "1")]
    pub transaction_id: ::core::option::Option<TransactionId>,
    #[prost(uint32, tag = "2")]
    pub index: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionId {
    #[prost(bytes = "vec", tag = "1")]
    pub bytes: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScriptPublicKey {
    #[prost(bytes = "vec", tag = "1")]
    pub script: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "2")]
    pub version: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionOutput {
    #[prost(uint64, tag = "1")]
    pub value: u64,
    #[prost(message, optional, tag = "2")]
    pub script_public_key: ::core::option::Option<ScriptPublicKey>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockMessage {
    #[prost(message, optional, tag = "1")]
    pub header: ::core::option::Option<BlockHeader>,
    #[prost(message, repeated, tag = "2")]
    pub transactions: ::prost::alloc::vec::Vec<TransactionMessage>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockHeader {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(message, repeated, tag = "12")]
    pub parents: ::prost::alloc::vec::Vec<BlockLevelParents>,
    #[prost(message, optional, tag = "3")]
    pub hash_merkle_root: ::core::option::Option<Hash>,
    #[prost(message, optional, tag = "4")]
    pub accepted_id_merkle_root: ::core::option::Option<Hash>,
    #[prost(message, optional, tag = "5")]
    pub utxo_commitment: ::core::option::Option<Hash>,
    #[prost(int64, tag = "6")]
    pub timestamp: i64,
    #[prost(uint32, tag = "7")]
    pub bits: u32,
    #[prost(uint64, tag = "8")]
    pub nonce: u64,
    #[prost(uint64, tag = "9")]
    pub daa_score: u64,
    #[prost(bytes = "vec", tag = "10")]
    pub blue_work: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "14")]
    pub pruning_point: ::core::option::Option<Hash>,
    #[prost(uint64, tag = "13")]
    pub blue_score: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockLevelParents {
    #[prost(message, repeated, tag = "1")]
    pub parent_hashes: ::prost::alloc::vec::Vec<Hash>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hash {
    #[prost(bytes = "vec", tag = "1")]
    pub bytes: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestBlockLocatorMessage {
    #[prost(message, optional, tag = "1")]
    pub high_hash: ::core::option::Option<Hash>,
    #[prost(uint32, tag = "2")]
    pub limit: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockLocatorMessage {
    #[prost(message, repeated, tag = "1")]
    pub hashes: ::prost::alloc::vec::Vec<Hash>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestHeadersMessage {
    #[prost(message, optional, tag = "1")]
    pub low_hash: ::core::option::Option<Hash>,
    #[prost(message, optional, tag = "2")]
    pub high_hash: ::core::option::Option<Hash>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestNextHeadersMessage {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoneHeadersMessage {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestRelayBlocksMessage {
    #[prost(message, repeated, tag = "1")]
    pub hashes: ::prost::alloc::vec::Vec<Hash>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestTransactionsMessage {
    #[prost(message, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<TransactionId>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionNotFoundMessage {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<TransactionId>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvRelayBlockMessage {
    #[prost(message, optional, tag = "1")]
    pub hash: ::core::option::Option<Hash>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvTransactionsMessage {
    #[prost(message, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<TransactionId>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PingMessage {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PongMessage {
    #[prost(uint64, tag = "1")]
    pub nonce: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerackMessage {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VersionMessage {
    #[prost(uint32, tag = "1")]
    pub protocol_version: u32,
    #[prost(uint64, tag = "2")]
    pub services: u64,
    #[prost(int64, tag = "3")]
    pub timestamp: i64,
    #[prost(message, optional, tag = "4")]
    pub address: ::core::option::Option<NetAddress>,
    #[prost(bytes = "vec", tag = "5")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "6")]
    pub user_agent: ::prost::alloc::string::String,
    #[prost(bool, tag = "8")]
    pub disable_relay_tx: bool,
    #[prost(message, optional, tag = "9")]
    pub subnetwork_id: ::core::option::Option<SubnetworkId>,
    #[prost(string, tag = "10")]
    pub network: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RejectMessage {
    #[prost(string, tag = "1")]
    pub reason: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestPruningPointUtxoSetMessage {
    #[prost(message, optional, tag = "1")]
    pub pruning_point_hash: ::core::option::Option<Hash>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PruningPointUtxoSetChunkMessage {
    #[prost(message, repeated, tag = "1")]
    pub outpoint_and_utxo_entry_pairs: ::prost::alloc::vec::Vec<
        OutpointAndUtxoEntryPair,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OutpointAndUtxoEntryPair {
    #[prost(message, optional, tag = "1")]
    pub outpoint: ::core::option::Option<Outpoint>,
    #[prost(message, optional, tag = "2")]
    pub utxo_entry: ::core::option::Option<UtxoEntry>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UtxoEntry {
    #[prost(uint64, tag = "1")]
    pub amount: u64,
    #[prost(message, optional, tag = "2")]
    pub script_public_key: ::core::option::Option<ScriptPublicKey>,
    #[prost(uint64, tag = "3")]
    pub block_daa_score: u64,
    #[prost(bool, tag = "4")]
    pub is_coinbase: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestNextPruningPointUtxoSetChunkMessage {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DonePruningPointUtxoSetChunksMessage {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestIbdBlocksMessage {
    #[prost(message, repeated, tag = "1")]
    pub hashes: ::prost::alloc::vec::Vec<Hash>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnexpectedPruningPointMessage {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IbdBlockLocatorMessage {
    #[prost(message, optional, tag = "1")]
    pub target_hash: ::core::option::Option<Hash>,
    #[prost(message, repeated, tag = "2")]
    pub block_locator_hashes: ::prost::alloc::vec::Vec<Hash>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestIbdChainBlockLocatorMessage {
    #[prost(message, optional, tag = "1")]
    pub low_hash: ::core::option::Option<Hash>,
    #[prost(message, optional, tag = "2")]
    pub high_hash: ::core::option::Option<Hash>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IbdChainBlockLocatorMessage {
    #[prost(message, repeated, tag = "1")]
    pub block_locator_hashes: ::prost::alloc::vec::Vec<Hash>,
}
/// Legacy name of this message is `RequestAnticoneMessage`
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestAntipastMessage {
    #[prost(message, optional, tag = "1")]
    pub block_hash: ::core::option::Option<Hash>,
    #[prost(message, optional, tag = "2")]
    pub context_hash: ::core::option::Option<Hash>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IbdBlockLocatorHighestHashMessage {
    #[prost(message, optional, tag = "1")]
    pub highest_hash: ::core::option::Option<Hash>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IbdBlockLocatorHighestHashNotFoundMessage {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockHeadersMessage {
    #[prost(message, repeated, tag = "1")]
    pub block_headers: ::prost::alloc::vec::Vec<BlockHeader>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestPruningPointAndItsAnticoneMessage {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestNextPruningPointAndItsAnticoneBlocksMessage {}
/// TODO: remove once v4 is obsolete
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockWithTrustedDataMessage {
    #[prost(message, optional, tag = "1")]
    pub block: ::core::option::Option<BlockMessage>,
    #[prost(uint64, tag = "2")]
    pub daa_score: u64,
    #[prost(message, repeated, tag = "3")]
    pub daa_window: ::prost::alloc::vec::Vec<DaaBlock>,
    #[prost(message, repeated, tag = "4")]
    pub ghostdag_data: ::prost::alloc::vec::Vec<BlockGhostdagDataHashPair>,
}
/// TODO: rename to `TrustedBlock` once v5 is obsolete
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DaaBlock {
    #[prost(message, optional, tag = "3")]
    pub block: ::core::option::Option<BlockMessage>,
    #[prost(message, optional, tag = "2")]
    pub ghostdag_data: ::core::option::Option<GhostdagData>,
}
/// TODO: rename to `TrustedHeader` once v5 is obsolete
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DaaBlockV4 {
    #[prost(message, optional, tag = "1")]
    pub header: ::core::option::Option<BlockHeader>,
    #[prost(message, optional, tag = "2")]
    pub ghostdag_data: ::core::option::Option<GhostdagData>,
}
/// TODO: remove once v5 is obsolete
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockGhostdagDataHashPair {
    #[prost(message, optional, tag = "1")]
    pub hash: ::core::option::Option<Hash>,
    #[prost(message, optional, tag = "2")]
    pub ghostdag_data: ::core::option::Option<GhostdagData>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GhostdagData {
    #[prost(uint64, tag = "1")]
    pub blue_score: u64,
    #[prost(bytes = "vec", tag = "2")]
    pub blue_work: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "3")]
    pub selected_parent: ::core::option::Option<Hash>,
    #[prost(message, repeated, tag = "4")]
    pub merge_set_blues: ::prost::alloc::vec::Vec<Hash>,
    #[prost(message, repeated, tag = "5")]
    pub merge_set_reds: ::prost::alloc::vec::Vec<Hash>,
    #[prost(message, repeated, tag = "6")]
    pub blues_anticone_sizes: ::prost::alloc::vec::Vec<BluesAnticoneSizes>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BluesAnticoneSizes {
    #[prost(message, optional, tag = "1")]
    pub blue_hash: ::core::option::Option<Hash>,
    #[prost(uint32, tag = "2")]
    pub anticone_size: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoneBlocksWithTrustedDataMessage {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PruningPointsMessage {
    #[prost(message, repeated, tag = "1")]
    pub headers: ::prost::alloc::vec::Vec<BlockHeader>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestPruningPointProofMessage {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PruningPointProofMessage {
    #[prost(message, repeated, tag = "1")]
    pub headers: ::prost::alloc::vec::Vec<PruningPointProofHeaderArray>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PruningPointProofHeaderArray {
    #[prost(message, repeated, tag = "1")]
    pub headers: ::prost::alloc::vec::Vec<BlockHeader>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadyMessage {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockWithTrustedDataV4Message {
    #[prost(message, optional, tag = "1")]
    pub block: ::core::option::Option<BlockMessage>,
    /// TODO: remove once v5 is obsolete
    #[prost(uint64, repeated, tag = "2")]
    pub daa_window_indices: ::prost::alloc::vec::Vec<u64>,
    /// TODO: remove once v5 is obsolete
    #[prost(uint64, repeated, tag = "3")]
    pub ghostdag_data_indices: ::prost::alloc::vec::Vec<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrustedDataMessage {
    /// TODO: rename to `trustedSubDag` once v5 is obsolete
    #[prost(message, repeated, tag = "1")]
    pub daa_window: ::prost::alloc::vec::Vec<DaaBlockV4>,
    /// TODO: remove once v5 is obsolete
    #[prost(message, repeated, tag = "2")]
    pub ghostdag_data: ::prost::alloc::vec::Vec<BlockGhostdagDataHashPair>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntropyXMessage {
    #[prost(uint32, tag = "101")]
    pub response_id: u32,
    #[prost(uint32, tag = "102")]
    pub request_id: u32,
    #[prost(
        oneof = "entropy_x_message::Payload",
        tags = "1, 2, 3, 5, 6, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 30, 31, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56"
    )]
    pub payload: ::core::option::Option<entropy_x_message::Payload>,
}
/// Nested message and enum types in `EntropyXMessage`.
pub mod entropy_x_message {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        #[prost(message, tag = "1")]
        Addresses(super::AddressesMessage),
        #[prost(message, tag = "2")]
        Block(super::BlockMessage),
        #[prost(message, tag = "3")]
        Transaction(super::TransactionMessage),
        #[prost(message, tag = "5")]
        BlockLocator(super::BlockLocatorMessage),
        #[prost(message, tag = "6")]
        RequestAddresses(super::RequestAddressesMessage),
        #[prost(message, tag = "10")]
        RequestRelayBlocks(super::RequestRelayBlocksMessage),
        #[prost(message, tag = "12")]
        RequestTransactions(super::RequestTransactionsMessage),
        #[prost(message, tag = "13")]
        IbdBlock(super::BlockMessage),
        #[prost(message, tag = "14")]
        InvRelayBlock(super::InvRelayBlockMessage),
        #[prost(message, tag = "15")]
        InvTransactions(super::InvTransactionsMessage),
        #[prost(message, tag = "16")]
        Ping(super::PingMessage),
        #[prost(message, tag = "17")]
        Pong(super::PongMessage),
        #[prost(message, tag = "19")]
        Verack(super::VerackMessage),
        #[prost(message, tag = "20")]
        Version(super::VersionMessage),
        #[prost(message, tag = "21")]
        TransactionNotFound(super::TransactionNotFoundMessage),
        #[prost(message, tag = "22")]
        Reject(super::RejectMessage),
        #[prost(message, tag = "25")]
        PruningPointUtxoSetChunk(super::PruningPointUtxoSetChunkMessage),
        #[prost(message, tag = "26")]
        RequestIbdBlocks(super::RequestIbdBlocksMessage),
        #[prost(message, tag = "27")]
        UnexpectedPruningPoint(super::UnexpectedPruningPointMessage),
        #[prost(message, tag = "30")]
        IbdBlockLocator(super::IbdBlockLocatorMessage),
        #[prost(message, tag = "31")]
        IbdBlockLocatorHighestHash(super::IbdBlockLocatorHighestHashMessage),
        #[prost(message, tag = "33")]
        RequestNextPruningPointUtxoSetChunk(
            super::RequestNextPruningPointUtxoSetChunkMessage,
        ),
        #[prost(message, tag = "34")]
        DonePruningPointUtxoSetChunks(super::DonePruningPointUtxoSetChunksMessage),
        #[prost(message, tag = "35")]
        IbdBlockLocatorHighestHashNotFound(
            super::IbdBlockLocatorHighestHashNotFoundMessage,
        ),
        #[prost(message, tag = "36")]
        BlockWithTrustedData(super::BlockWithTrustedDataMessage),
        #[prost(message, tag = "37")]
        DoneBlocksWithTrustedData(super::DoneBlocksWithTrustedDataMessage),
        #[prost(message, tag = "40")]
        RequestPruningPointAndItsAnticone(
            super::RequestPruningPointAndItsAnticoneMessage,
        ),
        #[prost(message, tag = "41")]
        BlockHeaders(super::BlockHeadersMessage),
        #[prost(message, tag = "42")]
        RequestNextHeaders(super::RequestNextHeadersMessage),
        #[prost(message, tag = "43")]
        DoneHeaders(super::DoneHeadersMessage),
        #[prost(message, tag = "44")]
        RequestPruningPointUtxoSet(super::RequestPruningPointUtxoSetMessage),
        #[prost(message, tag = "45")]
        RequestHeaders(super::RequestHeadersMessage),
        #[prost(message, tag = "46")]
        RequestBlockLocator(super::RequestBlockLocatorMessage),
        #[prost(message, tag = "47")]
        PruningPoints(super::PruningPointsMessage),
        #[prost(message, tag = "48")]
        RequestPruningPointProof(super::RequestPruningPointProofMessage),
        #[prost(message, tag = "49")]
        PruningPointProof(super::PruningPointProofMessage),
        #[prost(message, tag = "50")]
        Ready(super::ReadyMessage),
        #[prost(message, tag = "51")]
        BlockWithTrustedDataV4(super::BlockWithTrustedDataV4Message),
        #[prost(message, tag = "52")]
        TrustedData(super::TrustedDataMessage),
        #[prost(message, tag = "53")]
        RequestIbdChainBlockLocator(super::RequestIbdChainBlockLocatorMessage),
        #[prost(message, tag = "54")]
        IbdChainBlockLocator(super::IbdChainBlockLocatorMessage),
        #[prost(message, tag = "55")]
        RequestAntipast(super::RequestAntipastMessage),
        #[prost(message, tag = "56")]
        RequestNextPruningPointAndItsAnticoneBlocks(
            super::RequestNextPruningPointAndItsAnticoneBlocksMessage,
        ),
    }
}
/// Generated client implementations.
pub mod p2p_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct P2pClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl P2pClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> P2pClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> P2pClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            P2pClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn message_stream(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::EntropyXMessage>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::EntropyXMessage>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/protowire.P2P/MessageStream",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("protowire.P2P", "MessageStream"));
            self.inner.streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod p2p_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with P2pServer.
    #[async_trait]
    pub trait P2p: Send + Sync + 'static {
        /// Server streaming response type for the MessageStream method.
        type MessageStreamStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::EntropyXMessage, tonic::Status>,
            >
            + Send
            + 'static;
        async fn message_stream(
            &self,
            request: tonic::Request<tonic::Streaming<super::EntropyXMessage>>,
        ) -> std::result::Result<
            tonic::Response<Self::MessageStreamStream>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct P2pServer<T: P2p> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: P2p> P2pServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for P2pServer<T>
    where
        T: P2p,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/protowire.P2P/MessageStream" => {
                    #[allow(non_camel_case_types)]
                    struct MessageStreamSvc<T: P2p>(pub Arc<T>);
                    impl<T: P2p> tonic::server::StreamingService<super::EntropyXMessage>
                    for MessageStreamSvc<T> {
                        type Response = super::EntropyXMessage;
                        type ResponseStream = T::MessageStreamStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::EntropyXMessage>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as P2p>::message_stream(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = MessageStreamSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: P2p> Clone for P2pServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: P2p> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: P2p> tonic::server::NamedService for P2pServer<T> {
        const NAME: &'static str = "protowire.P2P";
    }
}
